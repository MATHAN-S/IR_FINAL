# -*- coding: utf-8 -*-
"""IR FINAL LAB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BGbg8BarltUi-Js4rpXhhLJv_atJWaFr

## Recommendation
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

movies_df = pd.read_csv('Movie.csv')
reviews_df = pd.read_csv('Review.csv')

user_movie_matrix = reviews_df.pivot_table(index='user_id', columns='movie_id', values='review', aggfunc='count', fill_value=0)
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

data = pd.merge(reviews_df, movies_df, on='movie_id')
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_features=1000)
tfidf_matrix = tfidf_vectorizer.fit_transform(data['review'])

def recommend_movies_with_query(user_id, query, top_k=5):
    user_sim_scores = user_similarity_df[user_id].sort_values(ascending=False)
    similar_users = user_sim_scores[user_sim_scores.index != user_id].head(top_k).index
    similar_users_movies = user_movie_matrix.loc[similar_users].mean(axis=0)
    user_movies = user_movie_matrix.loc[user_id]
    unseen_movies = similar_users_movies[user_movies == 0]
    query_tfidf = tfidf_vectorizer.transform([query])
    content_similarities = cosine_similarity(query_tfidf, tfidf_matrix).flatten()
    top_reviews_idx = np.argsort(content_similarities)[::-1]
    top_reviews_movie_ids = data.iloc[top_reviews_idx]['movie_id']
    recommended_movies = [movie_id for movie_id in top_reviews_movie_ids if movie_id in unseen_movies.index]
    recommended_movies = recommended_movies[:top_k]
    movie_recommendations = movies_df[movies_df['movie_id'].isin(recommended_movies)]
    return movie_recommendations[['movie_id', 'name', 'director']]

user_id = 1
query = "romantic comedy"
recommended_movies = recommend_movies_with_query(user_id, query, top_k=5)
print(recommended_movies)

"""## Clustering"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import seaborn as sns

movies_df = pd.read_csv('Movie.csv')
reviews_df = pd.read_csv('Review.csv')
data = pd.merge(reviews_df, movies_df, on='movie_id')

tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_features=1000)
reviews_tfidf = tfidf_vectorizer.fit_transform(data['review'])

num_clusters = 5
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
clusters = kmeans.fit_predict(reviews_tfidf)
data['cluster'] = clusters

def recommend_movies(query, top_k=5):
    query_tfidf = tfidf_vectorizer.transform([query])
    query_cluster = kmeans.predict(query_tfidf)[0]

    matched_reviews = data[data['cluster'] == query_cluster]
    matched_reviews_tfidf = reviews_tfidf[matched_reviews.index]
    similarities = cosine_similarity(query_tfidf, matched_reviews_tfidf).flatten()
    matched_reviews['similarity'] = similarities

    matched_reviews = matched_reviews.sort_values(by='similarity', ascending=False)
    recommended_movie_ids = matched_reviews['movie_id'].unique()[:top_k]
    movie_recommendations = movies_df[movies_df['movie_id'].isin(recommended_movie_ids)]

    return movie_recommendations[['movie_id', 'name', 'director']]

query = "Recommend a romantic comedy movie."
recommended_movies = recommend_movies(query, top_k=5)
print(recommended_movies)

pca = PCA(n_components=2)  # Reducing to 2 dimensions for visualization
reduced_data = pca.fit_transform(reviews_tfidf.toarray())

# Add PCA results to DataFrame
data['pca1'] = reduced_data[:, 0]
data['pca2'] = reduced_data[:, 1]

# Plot clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x='pca1', y='pca2', hue='cluster', data= data, palette='Set1', s=100, alpha=0.7)
plt.title(f"K-Means Clustering Visualization (k={num_clusters})")
plt.show()

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Load the data
movies_df = pd.read_csv('Movie.csv')
reviews_df = pd.read_csv('Review.csv')

# Create User-Movie Interaction Matrix for User-based Filtering
user_movie_matrix = reviews_df.pivot_table(index='user_id', columns='movie_id', values='review', aggfunc='count', fill_value=0)

# Compute User-User Cosine Similarity Matrix
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Create Movie-User Interaction Matrix for Item-based Filtering
movie_user_matrix = reviews_df.pivot_table(index='movie_id', columns='user_id', values='review', aggfunc='count', fill_value=0)

# Compute Movie-Movie Cosine Similarity Matrix
item_similarity = cosine_similarity(movie_user_matrix)
item_similarity_df = pd.DataFrame(item_similarity, index=movie_user_matrix.index, columns=movie_user_matrix.index)

# Merge reviews with movie names for content-based filtering
data = pd.merge(reviews_df, movies_df, on='movie_id')

# TF-IDF for Content-Based Filtering
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_features=1000)
tfidf_matrix = tfidf_vectorizer.fit_transform(data['review'])

# User-based Collaborative Filtering
def user_based_recommendation(user_id, top_k=5):
    user_sim_scores = user_similarity_df[user_id].sort_values(ascending=False)
    similar_users = user_sim_scores[user_sim_scores.index != user_id].head(top_k).index
    similar_users_movies = user_movie_matrix.loc[similar_users].mean(axis=0)
    user_movies = user_movie_matrix.loc[user_id]
    unseen_movies = similar_users_movies[user_movies == 0]
    recommended_movies = unseen_movies.sort_values(ascending=False).head(top_k).index
    movie_recommendations = movies_df[movies_df['movie_id'].isin(recommended_movies)]
    return movie_recommendations[['movie_id', 'name', 'director']]

# Item-based Collaborative Filtering
def item_based_recommendation(user_id, top_k=5):
    user_movies = user_movie_matrix.loc[user_id]
    watched_movies = user_movies[user_movies > 0].index
    movie_scores = pd.Series(np.zeros(movie_user_matrix.shape[0]), index=movie_user_matrix.index)

    for movie_id in watched_movies:
        similar_movies = item_similarity_df[movie_id].sort_values(ascending=False)
        movie_scores += similar_movies

    user_watched = user_movies[user_movies > 0].index
    movie_scores = movie_scores.drop(labels=user_watched)
    recommended_movies = movie_scores.sort_values(ascending=False).head(top_k).index
    movie_recommendations = movies_df[movies_df['movie_id'].isin(recommended_movies)]
    return movie_recommendations[['movie_id', 'name', 'director']]

# Content-based + Collaborative Filtering (Existing Function)
def recommend_movies_with_query(user_id, query, top_k=5):
    user_sim_scores = user_similarity_df[user_id].sort_values(ascending=False)
    similar_users = user_sim_scores[user_sim_scores.index != user_id].head(top_k).index
    similar_users_movies = user_movie_matrix.loc[similar_users].mean(axis=0)
    user_movies = user_movie_matrix.loc[user_id]
    unseen_movies = similar_users_movies[user_movies == 0]
    query_tfidf = tfidf_vectorizer.transform([query])
    content_similarities = cosine_similarity(query_tfidf, tfidf_matrix).flatten()
    top_reviews_idx = np.argsort(content_similarities)[::-1]
    top_reviews_movie_ids = data.iloc[top_reviews_idx]['movie_id']
    recommended_movies = [movie_id for movie_id in top_reviews_movie_ids if movie_id in unseen_movies.index]
    recommended_movies = recommended_movies[:top_k]
    movie_recommendations = movies_df[movies_df['movie_id'].isin(recommended_movies)]
    return movie_recommendations[['movie_id', 'name', 'director']]

# Example usage:
user_id = 1
query = "romantic comedy"

# Get recommendations
print("User-Based Recommendations:")
user_based_recommendations = user_based_recommendation(user_id, top_k=5)
print(user_based_recommendations)

print("\nItem-Based Recommendations:")
item_based_recommendations = item_based_recommendation(user_id, top_k=5)
print(item_based_recommendations)

print("\nContent + Collaborative Recommendations with Query:")
recommended_movies = recommend_movies_with_query(user_id, query, top_k=5)
print(recommended_movies)